import { auth } from '@/lib/auth';
import { openai } from '@/lib/ia';
import { NextResponse } from 'next/server';
import { CoreMessage, streamText } from 'ai';
import { ratelimit } from '@/lib/ratelimit';

interface RequestData {
  messages: CoreMessage[] | undefined;
}

export const maxDuration = 30;

export const POST = auth(async function POST(req) {
  if (!req.auth) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const ip = req.headers.get('x-forwarded-for');
  const { success } = await ratelimit.limit(`${ip}-conversation`);

  if (!success) {
    return NextResponse.json({ error: 'Too many requests' }, { status: 429 });
  }

  const { messages } = (await req.json()) as RequestData;

  const result = await streamText({
    model: openai('gpt-3.5-turbo'),
    system: `You are a professional content creation assistant. Its goal is to create concise, SEO-optimized content based on user input. Follow these guidelines:
- Start the response with a Markdown front matter section containing:
- **title**: A clear, SEO-optimized title.
- **description**: A short and engaging description for SEO purposes.
- After the front matter, include the generated content in plain Markdown format.
- Ensure the content is professional, engaging, and relevant to the provided topic.
- Avoid using unnecessary subheadings unless explicitly requested.
- The final output must be ready-to-use MDX content.

  Example structure:

---
title: "Generated Title"
description: "Short description for SEO purposes."
---

Content generated by the assistant, written in Markdown format.
`,
    messages,
  });

  return result.toDataStreamResponse();
});
